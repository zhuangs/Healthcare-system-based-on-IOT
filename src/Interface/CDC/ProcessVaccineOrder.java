/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Interface.CDC;

import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.DistributorOrganization;
import Business.Organization.Organization;
import Business.Role.PHDRole;
import Business.UserAccount.UserAccount;
import Business.Vaccine.VaccineLimit;
import Business.WorkRequest.ClinicRequest;
import Business.WorkRequest.VaccineRequestItem;
import Business.WorkRequest.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yufeng
 */
public class ProcessVaccineOrder extends javax.swing.JPanel {

    /**
     * Creates new form ProcessVaccineOrder
     */
    JPanel userProcessContainer;
    WorkRequest workRequest;
    Enterprise enterprise;
    UserAccount userAccount;
    Network network;
    
    public ProcessVaccineOrder(JPanel userProcessContainer,WorkRequest workRequest,Network network, Enterprise enterprise,UserAccount userAccount  ) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.workRequest = workRequest;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        this.network = network;
        populateVaccineJTable();
        
        PHDjLabel1.setText(workRequest.getPHDName());
    }
    
    
    
    public void populateVaccineJTable(){
        DefaultTableModel dtm = (DefaultTableModel) VaccineItemJTable.getModel();
        dtm.setRowCount(0);
        for(VaccineRequestItem vaccineRequestItem : ((ClinicRequest)workRequest).getVaccineRequestItemList()){
            Object[] row = new Object[5];
            
            row[0] = vaccineRequestItem;
            row[1] = vaccineRequestItem.getVaccine().getName();
            row[2] = vaccineRequestItem.getVaccine().getManufacturerName();
            int limit = 0;
            for(VaccineLimit vaccineLimit : ((PHDRole)workRequest.getPHDAdmin().getRole()).getVaccineLimitlist()){
                if(vaccineRequestItem.getVaccine().getName().equals(vaccineLimit.getVaccine().getName())){
                    row[3] = vaccineLimit.getLimitAmout();
                    limit = vaccineLimit.getLimitAmout();
                   
                }
                 
            }
            
            int totalVaccineLimitLeft = 0;
            for(Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                if(organization.getName().equals(workRequest.getPHDName())){
                    for(WorkRequest workRequestinPHD : organization.getWorkQueue().getWorkRequestList()){
                        for(VaccineRequestItem vri : ((ClinicRequest)workRequestinPHD).getVaccineRequestItemList()){
                            if(vri.getVaccine().getName().equals(vaccineRequestItem.getVaccine().getName())){
                                totalVaccineLimitLeft = totalVaccineLimitLeft + vri.getAmount();
                            }
                        }
                    }
                }
            }
            row[4] = limit - totalVaccineLimitLeft;
            dtm.addRow(row);
            
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        VaccineItemJTable = new javax.swing.JTable();
        approveJButton1 = new javax.swing.JButton();
        PHDjLabel1 = new javax.swing.JLabel();
        backJButton1 = new javax.swing.JButton();

        VaccineItemJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vaccine ID", "Vaccine Name", "Manufacturer Name", "Vaccine Limit", "Limit Left"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(VaccineItemJTable);

        approveJButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        approveJButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Circle-apply-icon.png"))); // NOI18N
        approveJButton1.setText("Approve");
        approveJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveJButton1ActionPerformed(evt);
            }
        });

        PHDjLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        PHDjLabel1.setText("jLabel1");

        backJButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        backJButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Back-3-icon.png"))); // NOI18N
        backJButton1.setText("Back");
        backJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(232, 232, 232)
                        .addComponent(approveJButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(PHDjLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backJButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(PHDjLabel1)
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(approveJButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 118, Short.MAX_VALUE)
                .addComponent(backJButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void approveJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveJButton1ActionPerformed
        // TODO add your handling code here:
       if(workRequest.getStatus().equals("Sent to CDC")){
          userAccount.getWorkQueue().getWorkRequestList().add(workRequest);
            workRequest.setCDCAdmin(userAccount);
            workRequest.setStatus("Sent to Distributor for shippment");
            for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList()){
                if(org instanceof DistributorOrganization){
                    org.getWorkQueue().getWorkRequestList().add(workRequest);
                }
            } 
       }else{
                JOptionPane.showMessageDialog(null, "This Order Has Been Approved");
                return;
       }
       
       

    }//GEN-LAST:event_approveJButton1ActionPerformed

    private void backJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel PHDjLabel1;
    private javax.swing.JTable VaccineItemJTable;
    private javax.swing.JButton approveJButton1;
    private javax.swing.JButton backJButton1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
